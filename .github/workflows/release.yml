name: Release .app and .workflow folders

on:
  push:
    branches:
      - main  # 当推送到 main 分支时触发

permissions:
  contents: write  # 确保 GITHUB_TOKEN 有写权限

jobs:
  release-apps-workflows:
    runs-on: macos-latest  # 使用 macOS 环境
    steps:
      # Step 1: Checkout repository with full commit history (fetch at least 2 commits)
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 2  # 拉取当前和上一个提交

      # Step 2: Find all changed .app and .workflow directories recursively
      - name: Find changed .app and .workflow directories
        id: find_changed_folders
        run: |
          # 检查是否有足够的历史提交
          if [ $(git rev-list --count HEAD) -lt 2 ]; then
            echo "Not enough commit history to compare. Exiting."
            exit 0
          fi

          # 获取当前提交与上一提交之间有变化的文件
          changed_files=$(git diff --name-only HEAD~1 HEAD)

          # 输出调试信息，但不要在变量赋值时添加额外信息
          echo "Changed files detected:"
          echo "$changed_files"

          # 检查是否有变化的文件
          if [ -z "$changed_files" ]; then
            echo "No changes detected."
            echo "::set-output name=changed_folders::"  # 确保输出为空
            exit 0  # 没有变化则正常退出
          fi

          # 递归查找 .app 和 .workflow 文件夹中有变动的文件
          changed_folders=$(echo "$changed_files" | grep -E '(^.+\.app/|^.+\.workflow/)' | cut -d '/' -f 1 | sort | uniq)

          # 输出过滤后的文件夹
          echo "Filtered changed folders:"
          echo "$changed_folders"

          # 如果没有相关的文件夹变化，则退出
          if [ -z "$changed_folders" ]; then
            echo "No .app or .workflow directories changed."
            echo "::set-output name=changed_folders::"  # 确保输出为空
            exit 0  # 没有相关文件夹变化则正常退出
          fi

          # 设置输出，供后续步骤使用
          echo "::set-output name=changed_folders::$changed_folders"

      # Step 3: Create or update a release for the changed folders
      - name: Create or update a release for the changed folders
        if: contains(steps.find_changed_folders.outputs.changed_folders, '.')  # 检查是否存在任何变更文件夹
        run: |
          # 从上一步中获取更改的文件夹
          changed_folders=${{ steps.find_changed_folders.outputs.changed_folders }}
          
          count=$(echo "$changed_folders" | wc -w)  # 统计变更的文件夹数
          
          for folder in $changed_folders; do
            echo "Processing folder: $folder"
            
            folder_name=$(basename "$folder")

            # 打包文件夹为 ZIP 文件
            zip_file="${folder_name}.zip"
            zip -r "$zip_file" "$folder"

            # 创建或更新 GitHub Release
            release_response=$(curl --request POST \
              --url "https://api.github.com/repos/${{ github.repository }}/releases" \
              --header "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              --header "Content-Type: application/json" \
              --data '{
                "tag_name": "'"$folder_name-release"'",
                "target_commitish": "'"${{ github.sha }}"'",
                "name": "'"$folder_name Release"'",
                "draft": false,
                "prerelease": false
              }')

            # 获取 Release ID
            release_id=$(echo "$release_response" | jq '.id')

            # 上传 ZIP 文件到 Release
            curl --request POST \
              --url "https://uploads.github.com/repos/${{ github.repository }}/releases/$release_id/assets?name=$zip_file" \
              --header "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              --header "Content-Type: application/zip" \
              --upload-file "$zip_file"
          done
        shell: bash