name: Release .app and .workflow folders

on:
  push:
    branches:
      - main  # 当推送到 main 分支时触发

permissions:
  contents: write  # 确保 GITHUB_TOKEN 有写权限

jobs:
  release-apps-workflows:
    runs-on: macos-latest  # 使用 macOS 环境
    steps:
      # Step 1: Checkout repository with full commit history (fetch at least 2 commits)
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 2  # 拉取当前和上一个提交

      # Step 2: Find all .app and .workflow directories that changed
      - name: Find changed .app and .workflow directories
        id: find_changed_folders
        run: |
          # 获取当前提交与上一提交之间有变化的文件夹
          changed_folders=$(git diff --name-only HEAD~1 HEAD)

          # 打印调试信息
          echo "Changed files:"
          echo "$changed_folders"

          if [ -z "$changed_folders" ]; then
            echo "No changes detected in .app or .workflow directories"
            exit 0  # 没有检测到变化则退出
          fi

          # 过滤出 .app 和 .workflow 文件夹
          changed_folders=$(echo "$changed_folders" | grep -E '\.app|\.workflow' | cut -d '/' -f 1 | sort | uniq)

          # 再次打印调试信息
          echo "Filtered changed folders:"
          echo "$changed_folders"

          if [ -z "$changed_folders" ]; then
            echo "No changes in .app or .workflow directories"
            exit 0  # 没有检测到相关文件夹的变化则退出
          fi

          # 将找到的文件夹存储在 JSON 文件中
          echo "[" > changed_folders.json
          first=1
          for folder in $changed_folders; do
            if [ $first -eq 1 ]; then
              first=0
            else
              echo "," >> changed_folders.json
            fi
            echo "{\"path\": \"$folder\"}" >> changed_folders.json
          done
          echo "]" >> changed_folders.json
        shell: bash

      # Step 3: Create or update a release for the changed folders with a fixed tag
      - name: Create or update a release for the changed folders
        if: steps.find_changed_folders.outputs.changed_folders != ''  # 仅当有文件夹变更时才运行
        run: |
          count=$(jq length changed_folders.json)
          for (( i=0; i<count; i++ )); do
            folder=$(jq -r ".[$i].path" changed_folders.json)
            echo "Processing folder: $folder"
            
            folder_name=$(basename "$folder")

            # 打包文件夹为 ZIP 文件
            zip_file="${folder_name}.zip"
            zip -r "$zip_file" "$folder"

            # 创建或更新 GitHub Release
            release_response=$(curl --request POST \
              --url "https://api.github.com/repos/${{ github.repository }}/releases" \
              --header "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              --header "Content-Type: application/json" \
              --data '{
                "tag_name": "'"$folder_name-release"'",
                "target_commitish": "'"${{ github.sha }}"'",
                "name": "'"$folder_name Release"'",
                "draft": false,
                "prerelease": false
              }')

            # 获取 Release ID
            release_id=$(echo "$release_response" | jq '.id')

            # 上传 ZIP 文件到 Release
            curl --request POST \
              --url "https://uploads.github.com/repos/${{ github.repository }}/releases/$release_id/assets?name=$zip_file" \
              --header "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              --header "Content-Type: application/zip" \
              --upload-file "$zip_file"
          done
        shell: bash